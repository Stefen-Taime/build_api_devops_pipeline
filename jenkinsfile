pipeline { 
    agent any
    tools { 
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment { 
        SCANNER_HOME = tool 'sonar-server'
    }
    stages { 
        stage('Clean Workspace') { 
            steps { 
                cleanWs() 
            } 
        } 
        stage('Git Checkout') { 
            steps { 
                git branch: 'main', url: 'https://github.com/Stefen-Taime/build_api_devops_pipeline.git'
            } 
        } 
        stage('Run SonarQube') {
            steps {
                withSonarQubeEnv('sonar-server') { 
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=api \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://172.20.0.3:9000 \
                        -Dsonar.login=sqp_bc9902ae1276cf62f50c38719f743a6b1ed2c401\
                        -X
                    """
                } 
            } 
        }
        stage('SonarQube Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Create and Activate Virtual Environment') {
            steps {
                sh '''
                    python3 -m venv venv
                '''
            }
        }

        stage('Install pip Dependencies') {
            steps {
                sh '''#!/bin/bash
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install -r api/requirements.txt
                '''
            }
        }


        stage('Display Python Versions') {
            steps {
                sh '''
                    . venv/bin/activate
                    echo "Python version:"
                    python3 --version
                '''
            }
        }

        stage('OWASP Dependency Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'owasp-dp-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Trivy Filesystem Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage("Prep Docker Environment"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker system prune -f"
                       sh "docker container prune -f"
                    }
                }
            }
        }
        stage('Build and Push Docker') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t stefen2020/api:latest ./api"
                        sh "docker push stefen2020/api:latest"
                    }
                }
            }
        }

        stage('Trivy Docker Image Scan') {
            steps {
                sh "trivy image stefen2020/api:latest > trivyimage.txt"
            }
        }
        stage('List K8s Configs') {
            steps {
                sh 'ls -la'
            }
        }
        stage('Deploy to K8s') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG')]) {
                    sh 'kubectl apply -f kubernetes/deployment.yml --validate=false --insecure-skip-tls-verify=true'
                    sh 'kubectl apply -f kubernetes/service.yml'
                    sh 'kubectl get svc'
                    sh 'kubectl get all'
                }
            }
        }
    }
    post { 
        always { 
            emailext attachLog: true, 
                subject: "'${currentBuild.result}'", 
                body: "Project: ${env.JOB_NAME}<br/>" +
                      "Build Number: ${env.BUILD_NUMBER}<br/>" +
                      "URL: ${env.BUILD_URL}<br/>", 
                to: 'stefentaime@gmail.com', 
                attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        } 
    } 
}
